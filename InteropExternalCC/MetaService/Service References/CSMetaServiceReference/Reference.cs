//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Interop.ExternalCC.MetaService.CSMetaServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CSService", Namespace="http://schemas.datacontract.org/2004/07/Interop.CS.Models.Models")]
    [System.SerializableAttribute()]
    public partial class CSService : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Interop.ExternalCC.MetaService.CSMetaServiceReference.Participant ParticipantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParticipantCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WsdlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Interop.ExternalCC.MetaService.CSMetaServiceReference.Participant Participant {
            get {
                return this.ParticipantField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantField, value) != true)) {
                    this.ParticipantField = value;
                    this.RaisePropertyChanged("Participant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParticipantCode {
            get {
                return this.ParticipantCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantCodeField, value) != true)) {
                    this.ParticipantCodeField = value;
                    this.RaisePropertyChanged("ParticipantCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Wsdl {
            get {
                return this.WsdlField;
            }
            set {
                if ((object.ReferenceEquals(this.WsdlField, value) != true)) {
                    this.WsdlField = value;
                    this.RaisePropertyChanged("Wsdl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Participant", Namespace="http://schemas.datacontract.org/2004/07/Interop.CS.Models.Models")]
    [System.SerializableAttribute()]
    public partial class Participant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UriField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicKey {
            get {
                return this.PublicKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicKeyField, value) != true)) {
                    this.PublicKeyField = value;
                    this.RaisePropertyChanged("PublicKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uri {
            get {
                return this.UriField;
            }
            set {
                if ((object.ReferenceEquals(this.UriField, value) != true)) {
                    this.UriField = value;
                    this.RaisePropertyChanged("Uri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProviderCSDTO", Namespace="http://schemas.datacontract.org/2004/07/Interop.CS.MetaService.Models")]
    [System.SerializableAttribute()]
    public partial class ProviderCSDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicKey {
            get {
                return this.PublicKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicKeyField, value) != true)) {
                    this.PublicKeyField = value;
                    this.RaisePropertyChanged("PublicKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CSMetaServiceReference.ICSMetaService")]
    public interface ICSMetaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/RegisterService", ReplyAction="http://tempuri.org/ICSMetaService/RegisterServiceResponse")]
        void RegisterService(Interop.ExternalCC.MetaService.CSMetaServiceReference.CSService service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/RegisterService", ReplyAction="http://tempuri.org/ICSMetaService/RegisterServiceResponse")]
        System.Threading.Tasks.Task RegisterServiceAsync(Interop.ExternalCC.MetaService.CSMetaServiceReference.CSService service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/UnRegisterService", ReplyAction="http://tempuri.org/ICSMetaService/UnRegisterServiceResponse")]
        void UnRegisterService(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/UnRegisterService", ReplyAction="http://tempuri.org/ICSMetaService/UnRegisterServiceResponse")]
        System.Threading.Tasks.Task UnRegisterServiceAsync(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/GetProviders", ReplyAction="http://tempuri.org/ICSMetaService/GetProvidersResponse")]
        Interop.ExternalCC.MetaService.CSMetaServiceReference.ProviderCSDTO[] GetProviders(string consumerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/GetProviders", ReplyAction="http://tempuri.org/ICSMetaService/GetProvidersResponse")]
        System.Threading.Tasks.Task<Interop.ExternalCC.MetaService.CSMetaServiceReference.ProviderCSDTO[]> GetProvidersAsync(string consumerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/GetServices", ReplyAction="http://tempuri.org/ICSMetaService/GetServicesResponse")]
        string[] GetServices(string providerId, string consumerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/GetServices", ReplyAction="http://tempuri.org/ICSMetaService/GetServicesResponse")]
        System.Threading.Tasks.Task<string[]> GetServicesAsync(string providerId, string consumerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/GetService", ReplyAction="http://tempuri.org/ICSMetaService/GetServiceResponse")]
        string GetService(string providerId, string consumerId, string serviceId, string callType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/GetService", ReplyAction="http://tempuri.org/ICSMetaService/GetServiceResponse")]
        System.Threading.Tasks.Task<string> GetServiceAsync(string providerId, string consumerId, string serviceId, string callType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/ListConsumers", ReplyAction="http://tempuri.org/ICSMetaService/ListConsumersResponse")]
        string[] ListConsumers(string providerId, string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSMetaService/ListConsumers", ReplyAction="http://tempuri.org/ICSMetaService/ListConsumersResponse")]
        System.Threading.Tasks.Task<string[]> ListConsumersAsync(string providerId, string serviceId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICSMetaServiceChannel : Interop.ExternalCC.MetaService.CSMetaServiceReference.ICSMetaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CSMetaServiceClient : System.ServiceModel.ClientBase<Interop.ExternalCC.MetaService.CSMetaServiceReference.ICSMetaService>, Interop.ExternalCC.MetaService.CSMetaServiceReference.ICSMetaService {
        
        public CSMetaServiceClient() {
        }
        
        public CSMetaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CSMetaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CSMetaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CSMetaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RegisterService(Interop.ExternalCC.MetaService.CSMetaServiceReference.CSService service) {
            base.Channel.RegisterService(service);
        }
        
        public System.Threading.Tasks.Task RegisterServiceAsync(Interop.ExternalCC.MetaService.CSMetaServiceReference.CSService service) {
            return base.Channel.RegisterServiceAsync(service);
        }
        
        public void UnRegisterService(string serviceId) {
            base.Channel.UnRegisterService(serviceId);
        }
        
        public System.Threading.Tasks.Task UnRegisterServiceAsync(string serviceId) {
            return base.Channel.UnRegisterServiceAsync(serviceId);
        }
        
        public Interop.ExternalCC.MetaService.CSMetaServiceReference.ProviderCSDTO[] GetProviders(string consumerId) {
            return base.Channel.GetProviders(consumerId);
        }
        
        public System.Threading.Tasks.Task<Interop.ExternalCC.MetaService.CSMetaServiceReference.ProviderCSDTO[]> GetProvidersAsync(string consumerId) {
            return base.Channel.GetProvidersAsync(consumerId);
        }
        
        public string[] GetServices(string providerId, string consumerId) {
            return base.Channel.GetServices(providerId, consumerId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetServicesAsync(string providerId, string consumerId) {
            return base.Channel.GetServicesAsync(providerId, consumerId);
        }
        
        public string GetService(string providerId, string consumerId, string serviceId, string callType) {
            return base.Channel.GetService(providerId, consumerId, serviceId, callType);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceAsync(string providerId, string consumerId, string serviceId, string callType) {
            return base.Channel.GetServiceAsync(providerId, consumerId, serviceId, callType);
        }
        
        public string[] ListConsumers(string providerId, string serviceId) {
            return base.Channel.ListConsumers(providerId, serviceId);
        }
        
        public System.Threading.Tasks.Task<string[]> ListConsumersAsync(string providerId, string serviceId) {
            return base.Channel.ListConsumersAsync(providerId, serviceId);
        }
    }
}
