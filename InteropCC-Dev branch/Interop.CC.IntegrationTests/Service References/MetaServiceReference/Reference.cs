//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Interop.CC.IntegrationTests.MetaServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProviderCCDTO", Namespace="http://schemas.datacontract.org/2004/07/Interop.CC.MetaService.Models")]
    [System.SerializableAttribute()]
    public partial class ProviderCCDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicKey {
            get {
                return this.PublicKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicKeyField, value) != true)) {
                    this.PublicKeyField = value;
                    this.RaisePropertyChanged("PublicKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MetaServiceReference.IMetaService")]
    public interface IMetaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/RegisterService", ReplyAction="http://tempuri.org/IMetaService/RegisterServiceResponse")]
        void RegisterService(Interop.CC.Models.Models.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/RegisterService", ReplyAction="http://tempuri.org/IMetaService/RegisterServiceResponse")]
        System.Threading.Tasks.Task RegisterServiceAsync(Interop.CC.Models.Models.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/UnRegisterService", ReplyAction="http://tempuri.org/IMetaService/UnRegisterServiceResponse")]
        void UnRegisterService(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/UnRegisterService", ReplyAction="http://tempuri.org/IMetaService/UnRegisterServiceResponse")]
        System.Threading.Tasks.Task UnRegisterServiceAsync(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetProviders", ReplyAction="http://tempuri.org/IMetaService/GetProvidersResponse")]
        Interop.CC.IntegrationTests.MetaServiceReference.ProviderCCDTO[] GetProviders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetProviders", ReplyAction="http://tempuri.org/IMetaService/GetProvidersResponse")]
        System.Threading.Tasks.Task<Interop.CC.IntegrationTests.MetaServiceReference.ProviderCCDTO[]> GetProvidersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetServices", ReplyAction="http://tempuri.org/IMetaService/GetServicesResponse")]
        string[] GetServices(string providerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetServices", ReplyAction="http://tempuri.org/IMetaService/GetServicesResponse")]
        System.Threading.Tasks.Task<string[]> GetServicesAsync(string providerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetService", ReplyAction="http://tempuri.org/IMetaService/GetServiceResponse")]
        string GetService(string providerId, string serviceId, string callType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetService", ReplyAction="http://tempuri.org/IMetaService/GetServiceResponse")]
        System.Threading.Tasks.Task<string> GetServiceAsync(string providerId, string serviceId, string callType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/ListConsumers", ReplyAction="http://tempuri.org/IMetaService/ListConsumersResponse")]
        string[] ListConsumers(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/ListConsumers", ReplyAction="http://tempuri.org/IMetaService/ListConsumersResponse")]
        System.Threading.Tasks.Task<string[]> ListConsumersAsync(string serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/CheckStateByTransactionId", ReplyAction="http://tempuri.org/IMetaService/CheckStateByTransactionIdResponse")]
        string CheckStateByTransactionId(string transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/CheckStateByTransactionId", ReplyAction="http://tempuri.org/IMetaService/CheckStateByTransactionIdResponse")]
        System.Threading.Tasks.Task<string> CheckStateByTransactionIdAsync(string transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetMessageByTransactionId", ReplyAction="http://tempuri.org/IMetaService/GetMessageByTransactionIdResponse")]
        string GetMessageByTransactionId(string transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/GetMessageByTransactionId", ReplyAction="http://tempuri.org/IMetaService/GetMessageByTransactionIdResponse")]
        System.Threading.Tasks.Task<string> GetMessageByTransactionIdAsync(string transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/PostMessage", ReplyAction="http://tempuri.org/IMetaService/PostMessageResponse")]
        void PostMessage(string transactionId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMetaService/PostMessage", ReplyAction="http://tempuri.org/IMetaService/PostMessageResponse")]
        System.Threading.Tasks.Task PostMessageAsync(string transactionId, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMetaServiceChannel : Interop.CC.IntegrationTests.MetaServiceReference.IMetaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MetaServiceClient : System.ServiceModel.ClientBase<Interop.CC.IntegrationTests.MetaServiceReference.IMetaService>, Interop.CC.IntegrationTests.MetaServiceReference.IMetaService {
        
        public MetaServiceClient() {
        }
        
        public MetaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MetaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MetaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MetaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RegisterService(Interop.CC.Models.Models.Service service) {
            base.Channel.RegisterService(service);
        }
        
        public System.Threading.Tasks.Task RegisterServiceAsync(Interop.CC.Models.Models.Service service) {
            return base.Channel.RegisterServiceAsync(service);
        }
        
        public void UnRegisterService(string serviceId) {
            base.Channel.UnRegisterService(serviceId);
        }
        
        public System.Threading.Tasks.Task UnRegisterServiceAsync(string serviceId) {
            return base.Channel.UnRegisterServiceAsync(serviceId);
        }
        
        public Interop.CC.IntegrationTests.MetaServiceReference.ProviderCCDTO[] GetProviders() {
            return base.Channel.GetProviders();
        }
        
        public System.Threading.Tasks.Task<Interop.CC.IntegrationTests.MetaServiceReference.ProviderCCDTO[]> GetProvidersAsync() {
            return base.Channel.GetProvidersAsync();
        }
        
        public string[] GetServices(string providerId) {
            return base.Channel.GetServices(providerId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetServicesAsync(string providerId) {
            return base.Channel.GetServicesAsync(providerId);
        }
        
        public string GetService(string providerId, string serviceId, string callType) {
            return base.Channel.GetService(providerId, serviceId, callType);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceAsync(string providerId, string serviceId, string callType) {
            return base.Channel.GetServiceAsync(providerId, serviceId, callType);
        }
        
        public string[] ListConsumers(string serviceId) {
            return base.Channel.ListConsumers(serviceId);
        }
        
        public System.Threading.Tasks.Task<string[]> ListConsumersAsync(string serviceId) {
            return base.Channel.ListConsumersAsync(serviceId);
        }
        
        public string CheckStateByTransactionId(string transactionId) {
            return base.Channel.CheckStateByTransactionId(transactionId);
        }
        
        public System.Threading.Tasks.Task<string> CheckStateByTransactionIdAsync(string transactionId) {
            return base.Channel.CheckStateByTransactionIdAsync(transactionId);
        }
        
        public string GetMessageByTransactionId(string transactionId) {
            return base.Channel.GetMessageByTransactionId(transactionId);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageByTransactionIdAsync(string transactionId) {
            return base.Channel.GetMessageByTransactionIdAsync(transactionId);
        }
        
        public void PostMessage(string transactionId, string message) {
            base.Channel.PostMessage(transactionId, message);
        }
        
        public System.Threading.Tasks.Task PostMessageAsync(string transactionId, string message) {
            return base.Channel.PostMessageAsync(transactionId, message);
        }
    }
}
