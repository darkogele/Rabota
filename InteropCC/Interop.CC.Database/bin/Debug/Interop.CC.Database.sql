/*
Deployment script for Interop.CC.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Interop.CC.Database"
:setvar DefaultFilePrefix "Interop.CC.Database"
:setvar DefaultDataPath "C:\Users\darko.gelevski\AppData\Local\Microsoft\VisualStudio\SSDT\InteropCC"
:setvar DefaultLogPath "C:\Users\darko.gelevski\AppData\Local\Microsoft\VisualStudio\SSDT\InteropCC"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
:setvar ScriptsPath "D:\Work\InteropCC\Interop.CC.Database\PostDeploymentScripts"


GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [AspNetUsers] AS Target
USING (VALUES
  ('4545e1c7-855b-4eb2-8e95-170e3b58b157',NULL,0,'AN3xeZR/v+8+QXJvYvRphlgcR07UcAjYJ5Z6LYH245ZO0giz9SErBTco7JsXchUdpA==','bde89f20-85a1-4ca6-8bbe-d862a0d9c1d7',NULL,0,0,NULL,0,0,'KorvusAdmin','MIGJAoGBAK3byVnVcv0QXU0gOI7f0U/ZayAVp/oo7f/fwT6ztrN7ugwtZFrpP9q5PNzzss8TCDn7S99KSTtrCgzeNpdx59ZQEZYrrRyM5lWG4zWra8U1KvMqXOhznIwQBQq5qelPUSuBJ324ZAb3zmUvPIifNYtd9hHMByxF3QHhIN82xvG7AgMBAAE=')
 ,('dedd57ca-c9ed-45f8-84d6-770e4d765ee9',NULL,0,'AP3rf2Wert9o4lVhUI7iMurghRW6hqdeOsnNNllgsBZZHsZdnioHJlzCVHXe+HZ+vg==','2bc3105c-04ed-4ea5-a0ca-cb9a2a13bbff',NULL,0,0,NULL,0,0,'MIOAAdmin','MIGJAoGBAK3byVnVcv0QXU0gOI7f0U/ZayAVp/oo7f/fwT6ztrN7ugwtZFrpP9q5PNzzss8TCDn7S99KSTtrCgzeNpdx59ZQEZYrrRyM5lWG4zWra8U1KvMqXOhznIwQBQq5qelPUSuBJ324ZAb3zmUvPIifNYtd9hHMByxF3QHhIN82xvG7AgMBAAE=')
) AS Source ([Id],[Email],[EmailConfirmed],[PasswordHash],[SecurityStamp],[PhoneNumber],[PhoneNumberConfirmed],[TwoFactorEnabled],[LockoutEndDateUtc],[LockoutEnabled],[AccessFailedCount],[UserName],[PublicKey])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (
	NULLIF(Source.[Email], Target.[Email]) IS NOT NULL OR NULLIF(Target.[Email], Source.[Email]) IS NOT NULL OR 
	NULLIF(Source.[EmailConfirmed], Target.[EmailConfirmed]) IS NOT NULL OR NULLIF(Target.[EmailConfirmed], Source.[EmailConfirmed]) IS NOT NULL OR 
	NULLIF(Source.[PasswordHash], Target.[PasswordHash]) IS NOT NULL OR NULLIF(Target.[PasswordHash], Source.[PasswordHash]) IS NOT NULL OR 
	NULLIF(Source.[SecurityStamp], Target.[SecurityStamp]) IS NOT NULL OR NULLIF(Target.[SecurityStamp], Source.[SecurityStamp]) IS NOT NULL OR 
	NULLIF(Source.[PhoneNumber], Target.[PhoneNumber]) IS NOT NULL OR NULLIF(Target.[PhoneNumber], Source.[PhoneNumber]) IS NOT NULL OR 
	NULLIF(Source.[PhoneNumberConfirmed], Target.[PhoneNumberConfirmed]) IS NOT NULL OR NULLIF(Target.[PhoneNumberConfirmed], Source.[PhoneNumberConfirmed]) IS NOT NULL OR 
	NULLIF(Source.[TwoFactorEnabled], Target.[TwoFactorEnabled]) IS NOT NULL OR NULLIF(Target.[TwoFactorEnabled], Source.[TwoFactorEnabled]) IS NOT NULL OR 
	NULLIF(Source.[LockoutEndDateUtc], Target.[LockoutEndDateUtc]) IS NOT NULL OR NULLIF(Target.[LockoutEndDateUtc], Source.[LockoutEndDateUtc]) IS NOT NULL OR 
	NULLIF(Source.[LockoutEnabled], Target.[LockoutEnabled]) IS NOT NULL OR NULLIF(Target.[LockoutEnabled], Source.[LockoutEnabled]) IS NOT NULL OR 
	NULLIF(Source.[AccessFailedCount], Target.[AccessFailedCount]) IS NOT NULL OR NULLIF(Target.[AccessFailedCount], Source.[AccessFailedCount]) IS NOT NULL OR 
	NULLIF(Source.[UserName], Target.[UserName]) IS NOT NULL OR NULLIF(Target.[UserName], Source.[UserName]) IS NOT NULL OR 
	NULLIF(Source.[PublicKey], Target.[PublicKey]) IS NOT NULL OR NULLIF(Target.[PublicKey], Source.[PublicKey]) IS NOT NULL) THEN
 UPDATE SET
  [Email] = Source.[Email], 
  [EmailConfirmed] = Source.[EmailConfirmed], 
  [PasswordHash] = Source.[PasswordHash], 
  [SecurityStamp] = Source.[SecurityStamp], 
  [PhoneNumber] = Source.[PhoneNumber], 
  [PhoneNumberConfirmed] = Source.[PhoneNumberConfirmed], 
  [TwoFactorEnabled] = Source.[TwoFactorEnabled], 
  [LockoutEndDateUtc] = Source.[LockoutEndDateUtc], 
  [LockoutEnabled] = Source.[LockoutEnabled], 
  [AccessFailedCount] = Source.[AccessFailedCount], 
  [UserName] = Source.[UserName], 
  [PublicKey] = Source.[PublicKey]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Email],[EmailConfirmed],[PasswordHash],[SecurityStamp],[PhoneNumber],[PhoneNumberConfirmed],[TwoFactorEnabled],[LockoutEndDateUtc],[LockoutEnabled],[AccessFailedCount],[UserName],[PublicKey])
 VALUES(Source.[Id],Source.[Email],Source.[EmailConfirmed],Source.[PasswordHash],Source.[SecurityStamp],Source.[PhoneNumber],Source.[PhoneNumberConfirmed],Source.[TwoFactorEnabled],Source.[LockoutEndDateUtc],Source.[LockoutEnabled],Source.[AccessFailedCount],Source.[UserName],Source.[PublicKey])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [AspNetUsers]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[AspNetUsers] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [AspNetRoles] AS Target
USING (VALUES
  ('2723b8e2-9357-401e-8a37-b8ac63d6a2f9','SuperAdmin')
 ,('4dc2efe3-b2ed-47de-beb9-37a0b30c1768','User')
 ,('bc3cc37c-c770-4987-bfc9-9498976b2cea','Admin')
) AS Source ([Id],[Name])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (
	NULLIF(Source.[Name], Target.[Name]) IS NOT NULL OR NULLIF(Target.[Name], Source.[Name]) IS NOT NULL) THEN
 UPDATE SET
  [Name] = Source.[Name]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Name])
 VALUES(Source.[Id],Source.[Name])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [AspNetRoles]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[AspNetRoles] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [AspNetUserRoles] AS Target
USING (VALUES
  ('4545e1c7-855b-4eb2-8e95-170e3b58b157','2723b8e2-9357-401e-8a37-b8ac63d6a2f9')
 ,('dedd57ca-c9ed-45f8-84d6-770e4d765ee9','bc3cc37c-c770-4987-bfc9-9498976b2cea')
) AS Source ([UserId],[RoleId])
ON (Target.[RoleId] = Source.[RoleId] AND Target.[UserId] = Source.[UserId])
WHEN NOT MATCHED BY TARGET THEN
 INSERT([UserId],[RoleId])
 VALUES(Source.[UserId],Source.[RoleId])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [AspNetUserRoles]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[AspNetUserRoles] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [Clients] AS Target
USING (VALUES
  ('consoleApp','lCXDroz4HhR1EIx8qaz3C13z/quTXBkQ3Q5hj7Qx3aA=','Console Application',1,1,14400,'*')
 ,('ngAuthApp','lCXDroz4HhR1EIx8qaz3C13z/quTXBkQ3Q5hj7Qx3aA=','AngularJS front-end Application',0,1,7200,'https://interop.cc.portal.ui')
) AS Source ([Id],[Secret],[Name],[ApplicationType],[Active],[RefreshTokenLifeTime],[AllowedOrigin])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (
	NULLIF(Source.[Secret], Target.[Secret]) IS NOT NULL OR NULLIF(Target.[Secret], Source.[Secret]) IS NOT NULL OR 
	NULLIF(Source.[Name], Target.[Name]) IS NOT NULL OR NULLIF(Target.[Name], Source.[Name]) IS NOT NULL OR 
	NULLIF(Source.[ApplicationType], Target.[ApplicationType]) IS NOT NULL OR NULLIF(Target.[ApplicationType], Source.[ApplicationType]) IS NOT NULL OR 
	NULLIF(Source.[Active], Target.[Active]) IS NOT NULL OR NULLIF(Target.[Active], Source.[Active]) IS NOT NULL OR 
	NULLIF(Source.[RefreshTokenLifeTime], Target.[RefreshTokenLifeTime]) IS NOT NULL OR NULLIF(Target.[RefreshTokenLifeTime], Source.[RefreshTokenLifeTime]) IS NOT NULL OR 
	NULLIF(Source.[AllowedOrigin], Target.[AllowedOrigin]) IS NOT NULL OR NULLIF(Target.[AllowedOrigin], Source.[AllowedOrigin]) IS NOT NULL) THEN
 UPDATE SET
  [Secret] = Source.[Secret], 
  [Name] = Source.[Name], 
  [ApplicationType] = Source.[ApplicationType], 
  [Active] = Source.[Active], 
  [RefreshTokenLifeTime] = Source.[RefreshTokenLifeTime], 
  [AllowedOrigin] = Source.[AllowedOrigin]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Secret],[Name],[ApplicationType],[Active],[RefreshTokenLifeTime],[AllowedOrigin])
 VALUES(Source.[Id],Source.[Secret],Source.[Name],Source.[ApplicationType],Source.[Active],Source.[RefreshTokenLifeTime],Source.[AllowedOrigin])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Clients]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Clients] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [Providers] AS Target
USING (VALUES
  ('MIIDgTCCAmmgAwIBAgIIQzlM4IDizgcwDQYJKoZIhvcNAQEFBQAwLzERMA8GA1UEAwwIRVBvdHBp
czIxDTALBgNVBAoMBE1JT0ExCzAJBgNVBAYTAk1LMB4XDTE1MTAyMjA3MDMxMFoXDTE2MTAyMTA3
MDMxMFowLzERMA8GA1UEAwwIS09SVkNDQTMxDTALBgNVBAoMBE1JT0ExCzAJBgNVBAYTAk1LMIGf
MA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCAfuNiQSvRZOTXupzhdmdETRjF0EbEDpdtCOVQlmHX
vHaaq9jcXuIwOH112FDoQTeIqEFfZAKn6Kgmz6WfFQ0UlNQBMakM1IIihOyLSUkEk35/2q02AVMY
A+aCDVu3b+9GFKTtkzA1dIY91nIvlz2uIx47Hne9J+8Ecsm/X4uUxwIDAQABo4IBIzCCAR8wHQYD
VR0OBBYEFFYzOjxWvHvi0yv4gW39RRj83SzpMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUiipk
d1rHf1ddQSHUVTkNaSUcEQMwgakGA1UdHwSBoTCBnjCBm6BkoGKGYGh0dHA6Ly8xMC40Ny4yMC4y
Mzc6ODA4MC9lamJjYS9wdWJsaWN3ZWIvd2ViZGlzdC9jZXJ0ZGlzdD9jbWQ9Y3JsJmlzc3Vlcj1D
Tj1FUG90cGlzMixPPU1JT0EsQz1NS6IzpDEwLzERMA8GA1UEAwwIRVBvdHBpczIxDTALBgNVBAoM
BE1JT0ExCzAJBgNVBAYTAk1LMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcDATAN
BgkqhkiG9w0BAQUFAAOCAQEAKl1t0LRerN7ZsRwI1wBqkZDqyOpXZIrwI49Egkp4eFdo2haE5OQf
rE21U/3Rznx3jCpCD0LPu+5wPyHwOan0TutAVsQ46RrORj5P5OMmj7zvxFEmXSm+pefMXI4SzS7J
Fxvv60OI+V3a/pZAYmOWPS1aO709hgHejWIP6Vto6ruBwi2aWaMEmGgzTBLw+Gy0Dpgg67UJhaEh
eoT3lZL+o+rf+/NmxRCbznZE1ff64l1geDcXAd3waL8VHK2ZLPWX1vbFVfUwTbyD440U0+4g/plS
yrT9O3ZXspbOhs1NpKrUhccp8Z14F5lofDcKMqr9GTmcMkmHokTkZq4btpwtWA==
','AKN')
 ,('MIIDgTCCAmmgAwIBAgIIWpzqNxZZ+dAwDQYJKoZIhvcNAQEFBQAwLzERMA8GA1UEAwwIRVBvdHBp
czIxDTALBgNVBAoMBE1JT0ExCzAJBgNVBAYTAk1LMB4XDTE1MTAyMjA3MDYzMVoXDTE2MTAyMTA3
MDYzMVowLzERMA8GA1UEAwwIS09SVkNDQjMxDTALBgNVBAoMBE1JT0ExCzAJBgNVBAYTAk1LMIGf
MA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCyaCnPZIDzyhrCGjYmWNsHuDEgZPKiH4hXrzKA8//C
90Ainm5Xg6/oUqqxCvCk1ALQ1bWf3LCeNtHwSvirytPYTi7yA6H7APd21RjnNcuG7M3zIw76E+j2
hzqqtF2kaNJHUEsbYGN85b/vguJJHSOggA6Zg8RsuFuTfxJ444BiCwIDAQABo4IBIzCCAR8wHQYD
VR0OBBYEFLFQZF4edfZ9BRKN1i2txdtJu21iMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUiipk
d1rHf1ddQSHUVTkNaSUcEQMwgakGA1UdHwSBoTCBnjCBm6BkoGKGYGh0dHA6Ly8xMC40Ny4yMC4y
Mzc6ODA4MC9lamJjYS9wdWJsaWN3ZWIvd2ViZGlzdC9jZXJ0ZGlzdD9jbWQ9Y3JsJmlzc3Vlcj1D
Tj1FUG90cGlzMixPPU1JT0EsQz1NS6IzpDEwLzERMA8GA1UEAwwIRVBvdHBpczIxDTALBgNVBAoM
BE1JT0ExCzAJBgNVBAYTAk1LMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcDATAN
BgkqhkiG9w0BAQUFAAOCAQEAb+JVnS/Hxd9B4Myy2YMvJFiveU5K5mQo1N9x1CDRQCqBhI/wcCLn
jDAgp8HTCy95q4nx8WS5JbTjpbjdcx1yuvu7zWpu9NBR/nekoYV0fWyxYvPiha1r6b2Y8blcydnr
or0C2v+Bfg02KylNq29xyW+LjYt4WabVfRq1LXuYJ1jNabrzxFF9Jzek/nP4Ki/cqp6Jhxxll5Pp
eAu+UpEEfc3Nz+LeOOqPps3huaMeGWGkbWeQAz0YuEGBT3sgYPxlmbpfLosbTAgM6lPo8s6vcTr0
942pmV0lTUW8Bq9S7dTTfrHa2uNO7eF2Dto7UjChpfOUyVOOjkra5+trUol5nQ==
','PIOM')
) AS Source ([PublicKey],[RoutingToken])
ON (Target.[RoutingToken] = Source.[RoutingToken])
WHEN MATCHED AND (
	NULLIF(Source.[PublicKey], Target.[PublicKey]) IS NOT NULL OR NULLIF(Target.[PublicKey], Source.[PublicKey]) IS NOT NULL) THEN
 UPDATE SET
  [PublicKey] = Source.[PublicKey]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([PublicKey],[RoutingToken])
 VALUES(Source.[PublicKey],Source.[RoutingToken])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Providers]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Providers] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

GO
PRINT N'Update complete.';


GO
