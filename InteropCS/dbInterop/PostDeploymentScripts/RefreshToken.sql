GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [RefreshToken] AS Target
USING (VALUES
  ('kRFgWpRWLJzNolAcS7uksEYDgUzpkG/PL6tjdhJy2NY=','marija','ngAuthApp','2015-11-19T08:18:37.173','2015-11-24T08:18:37.173','rfCUxgG863weZfrxaeg2IcXYm0SlTOnolw3Nh0qKC6dOpYc9tmzP6STL5777qd_j2scgAwLPQY102aLVynvQYtjauLp2aczhVB_2Fy8jC4jxCxw7U2DQKxkgMPS-dyEFdFo6LSZ9TBg_JWVVg7eDY6U4eTcOxFZ3vobCaYwuTKxrv4bQ_dObP155Dum5ZPLcX-T8lFtfr3HMTUJYOV3wladXyIpTUjeAofuopxzkZO1tcIINDNfMRP8RcUkl0lJVNN_2JT13SEasoOWd_B__wkZjWKuK1Iq3rKqxkSZaXKXH0JAXS8pXIW9VDHYJMqXjsXY-ig5x4R_sSNqTuFEYTM_Aco1EA62dCpIfczbUS1k')
 ,('OKMaLGOXdx+KwOrExKFSrZY+f+oMXmumKtmxpKaraMo=','KorvusAdmin','ngAuthApp','2015-11-19T08:17:30.163','2015-11-24T08:17:30.163','5uDt9OxmAH1zgSLm2kH8XZf3vfPiXoDbfQtdo-mqP8lGkdx5gw3yRgclo0Eiln8PmKwNVI8Nq9lmHaVnrmvVUZOpuVc2Oytk2vRk5-IdEyf_BuhHUvu0PrkcUIeOqYd5i-9HnKOKgrP3YAhtt6g-EkreucKZkXo7q4rlZVd0xX1KAatV27hDO2GNyblF1TRz8N_-foqZAIkpYa-80Tn4S9yKH2dyj-QYVj99aXCWZx45yklijBncXW-R4d3mRfeev-jdZAAx5pdipVkqiTE2_xG6on6vyvggJcTCBv8Cs_RO3J9nBYSW6-myrkJqXlTFRaJTkhw-8Ge4ySHKFbCK4YmA4kKronpvEWgQIy3MVqozdzDlqD2052K1bfbfOXiw')
) AS Source ([Id],[Subject],[ClientId],[IssuedUtc],[ExpiresUtc],[ProtectedTicket])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (
	NULLIF(Source.[Subject], Target.[Subject]) IS NOT NULL OR NULLIF(Target.[Subject], Source.[Subject]) IS NOT NULL OR 
	NULLIF(Source.[ClientId], Target.[ClientId]) IS NOT NULL OR NULLIF(Target.[ClientId], Source.[ClientId]) IS NOT NULL OR 
	NULLIF(Source.[IssuedUtc], Target.[IssuedUtc]) IS NOT NULL OR NULLIF(Target.[IssuedUtc], Source.[IssuedUtc]) IS NOT NULL OR 
	NULLIF(Source.[ExpiresUtc], Target.[ExpiresUtc]) IS NOT NULL OR NULLIF(Target.[ExpiresUtc], Source.[ExpiresUtc]) IS NOT NULL OR 
	NULLIF(Source.[ProtectedTicket], Target.[ProtectedTicket]) IS NOT NULL OR NULLIF(Target.[ProtectedTicket], Source.[ProtectedTicket]) IS NOT NULL) THEN
 UPDATE SET
  [Subject] = Source.[Subject], 
  [ClientId] = Source.[ClientId], 
  [IssuedUtc] = Source.[IssuedUtc], 
  [ExpiresUtc] = Source.[ExpiresUtc], 
  [ProtectedTicket] = Source.[ProtectedTicket]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Subject],[ClientId],[IssuedUtc],[ExpiresUtc],[ProtectedTicket])
 VALUES(Source.[Id],Source.[Subject],Source.[ClientId],Source.[IssuedUtc],Source.[ExpiresUtc],Source.[ProtectedTicket])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [RefreshToken]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[RefreshToken] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO