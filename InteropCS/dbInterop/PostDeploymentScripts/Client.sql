GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [Client] AS Target
USING (VALUES
  ('consoleApp','5YV7M1r981yoGhELyB84aC+KiYksxZf1OY3++C1CtRM=','Console Application',1,1,14400,'*')
 ,('ngAuthApp','lCXDroz4HhR1EIx8qaz3C13z/quTXBkQ3Q5hj7Qx3aA=','AngularJS front-end Application',0,1,7200,'https://interop.cs.portal.ui')
) AS Source ([Id],[Secret],[Name],[ApplicationType],[Active],[RefreshTokenLifeTime],[AllowedOrigin])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (
	NULLIF(Source.[Secret], Target.[Secret]) IS NOT NULL OR NULLIF(Target.[Secret], Source.[Secret]) IS NOT NULL OR 
	NULLIF(Source.[Name], Target.[Name]) IS NOT NULL OR NULLIF(Target.[Name], Source.[Name]) IS NOT NULL OR 
	NULLIF(Source.[ApplicationType], Target.[ApplicationType]) IS NOT NULL OR NULLIF(Target.[ApplicationType], Source.[ApplicationType]) IS NOT NULL OR 
	NULLIF(Source.[Active], Target.[Active]) IS NOT NULL OR NULLIF(Target.[Active], Source.[Active]) IS NOT NULL OR 
	NULLIF(Source.[RefreshTokenLifeTime], Target.[RefreshTokenLifeTime]) IS NOT NULL OR NULLIF(Target.[RefreshTokenLifeTime], Source.[RefreshTokenLifeTime]) IS NOT NULL OR 
	NULLIF(Source.[AllowedOrigin], Target.[AllowedOrigin]) IS NOT NULL OR NULLIF(Target.[AllowedOrigin], Source.[AllowedOrigin]) IS NOT NULL) THEN
 UPDATE SET
  [Secret] = Source.[Secret], 
  [Name] = Source.[Name], 
  [ApplicationType] = Source.[ApplicationType], 
  [Active] = Source.[Active], 
  [RefreshTokenLifeTime] = Source.[RefreshTokenLifeTime], 
  [AllowedOrigin] = Source.[AllowedOrigin]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Secret],[Name],[ApplicationType],[Active],[RefreshTokenLifeTime],[AllowedOrigin])
 VALUES(Source.[Id],Source.[Secret],Source.[Name],Source.[ApplicationType],Source.[Active],Source.[RefreshTokenLifeTime],Source.[AllowedOrigin])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Client]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Client] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO